# coding: utf-8
"""Waylay Broker api tests.

This code was generated from the OpenAPI documentation of 'Waylay Broker'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import re
from importlib.util import find_spec
from typing import List, Union
from urllib.parse import quote

import pytest
from pytest_httpx import HTTPXMock
from typeguard import check_type
from waylay.sdk import ApiClient, WaylayClient
from waylay.sdk.api._models import Model
from waylay.services.data.api import MessagesApi
from waylay.services.data.service import DataService

from ..types.delete_messages200_response_stub import DeleteMessages200ResponseStub
from ..types.message_query_result_stub import MessageQueryResultStub
from ..types.message_query_stub import MessageQueryStub
from ..types.timestamped_event_stub import TimestampedEventStub

MODELS_AVAILABLE = (
    True if find_spec("waylay.services.data.models") is not None else False
)

if MODELS_AVAILABLE:
    from waylay.services.data.models import (
        DeleteMessages200Response,
        MessageQueryResult,
        TimestampedEvent,
    )


# some mappings that are needed for some <example> interpolations
null, true, false = None, True, False


@pytest.fixture
def messages_api(waylay_api_client: ApiClient) -> MessagesApi:
    return MessagesApi(waylay_api_client)


def test_registered(waylay_client: WaylayClient):
    """Test that MessagesApi api is registered in the sdk client."""
    assert isinstance(waylay_client.data.messages, MessagesApi)


def _delete_messages_set_mock_response(
    httpx_mock: HTTPXMock, gateway_url: str, resourceId: str
):
    mock_response = DeleteMessages200ResponseStub.create_json()
    httpx_mock_kwargs = {
        "method": "DELETE",
        "url": re.compile(f"^{gateway_url}/data/v1/messages/{resourceId}(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_delete_messages(
    service: DataService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for delete_messages
    Remove Messages For Resource
    """
    # set path params
    resourceId = "resource_id_example"

    kwargs = {}
    _delete_messages_set_mock_response(httpx_mock, gateway_url, quote(str(resourceId)))
    resp = await service.messages.delete_messages(resourceId, **kwargs)
    check_type(resp, Union[DeleteMessages200Response,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_delete_messages_without_types(
    service: DataService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for delete_messages with models not installed
    Remove Messages For Resource
    """
    # set path params
    resourceId = "resource_id_example"

    kwargs = {}
    _delete_messages_set_mock_response(httpx_mock, gateway_url, quote(str(resourceId)))
    resp = await service.messages.delete_messages(resourceId, **kwargs)
    check_type(resp, Model)


def _get_latest_document_set_mock_response(
    httpx_mock: HTTPXMock, gateway_url: str, resourceId: str
):
    mock_response = TimestampedEventStub.create_json()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(
            f"^{gateway_url}/data/v1/messages/{resourceId}/current(\\?.*)?"
        ),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_get_latest_document(
    service: DataService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get_latest_document
    Retrieve Latest Message
    """
    # set path params
    resourceId = "resource_id_example"

    kwargs = {}
    _get_latest_document_set_mock_response(
        httpx_mock, gateway_url, quote(str(resourceId))
    )
    resp = await service.messages.get_latest_document(resourceId, **kwargs)
    check_type(resp, Union[TimestampedEvent,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_get_latest_document_without_types(
    service: DataService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get_latest_document with models not installed
    Retrieve Latest Message
    """
    # set path params
    resourceId = "resource_id_example"

    kwargs = {}
    _get_latest_document_set_mock_response(
        httpx_mock, gateway_url, quote(str(resourceId))
    )
    resp = await service.messages.get_latest_document(resourceId, **kwargs)
    check_type(resp, Model)


def _get_latest_messages_set_mock_response(
    httpx_mock: HTTPXMock, gateway_url: str, resourceId: str
):
    mock_response = [TimestampedEventStub.create_json()]
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(f"^{gateway_url}/data/v1/messages/{resourceId}(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_get_latest_messages(
    service: DataService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get_latest_messages
    Retrieve Messages For Resource
    """
    # set path params
    resourceId = "resource_id_example"

    kwargs = {}
    _get_latest_messages_set_mock_response(
        httpx_mock, gateway_url, quote(str(resourceId))
    )
    resp = await service.messages.get_latest_messages(resourceId, **kwargs)
    check_type(resp, Union[List[TimestampedEvent],])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_get_latest_messages_without_types(
    service: DataService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get_latest_messages with models not installed
    Retrieve Messages For Resource
    """
    # set path params
    resourceId = "resource_id_example"

    kwargs = {}
    _get_latest_messages_set_mock_response(
        httpx_mock, gateway_url, quote(str(resourceId))
    )
    resp = await service.messages.get_latest_messages(resourceId, **kwargs)
    check_type(resp, Model)


def _query_messages_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str):
    mock_response = MessageQueryResultStub.create_json()
    httpx_mock_kwargs = {
        "method": "POST",
        "url": re.compile(f"^{gateway_url}/data/v1/messages/query(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_query_messages(
    service: DataService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for query_messages
    Query Messages
    """
    # set path params
    kwargs = {
        "json": MessageQueryStub.create_instance(),
    }
    _query_messages_set_mock_response(httpx_mock, gateway_url)
    resp = await service.messages.query_messages(**kwargs)
    check_type(resp, Union[MessageQueryResult,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_query_messages_without_types(
    service: DataService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for query_messages with models not installed
    Query Messages
    """
    # set path params
    kwargs = {
        "json": MessageQueryStub.create_json(),
    }
    _query_messages_set_mock_response(httpx_mock, gateway_url)
    resp = await service.messages.query_messages(**kwargs)
    check_type(resp, Model)
