# coding: utf-8
"""Waylay Broker model tests.

This code was generated from the OpenAPI documentation of 'Waylay Broker'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.data.models.latest_measurement import LatestMeasurement

    LatestMeasurementAdapter = TypeAdapter(LatestMeasurement)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

latest_measurement_model_schema = json.loads(
    r"""{
  "type" : "object",
  "properties" : {
    "timestamp" : {
      "$ref" : "#/components/schemas/UnixEpochMillis"
    }
  },
  "additionalProperties" : {
    "maxItems" : 1,
    "type" : "array",
    "description" : "The latest value (in a singleton array), keyed by the metric name.",
    "items" : {
      "$ref" : "#/components/schemas/Measurements"
    }
  },
  "description" : "The latest measurement of a series.",
  "example" : {
    "temperature" : [ 13.6 ],
    "timestamp" : 1663269720694
  }
}
""",
    object_hook=with_example_provider,
)
latest_measurement_model_schema.update({"definitions": MODEL_DEFINITIONS})

latest_measurement_faker = JSF(latest_measurement_model_schema, allow_none_optionals=1)


class LatestMeasurementStub:
    """LatestMeasurement unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return latest_measurement_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "LatestMeasurement":
        """Create LatestMeasurement stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                LatestMeasurementAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return LatestMeasurementAdapter.validate_python(
            json, context={"skip_validation": True}
        )
